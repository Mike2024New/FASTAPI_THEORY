1. Теоретические вопросы
Что такое FastAPI и какие его основные преимущества?

В чем разница между HTTP методами GET, POST, PUT, PATCH и DELETE?

Что такое path параметры? Как и зачем они используются в FastAPI?

Почему порядок маршрутов с фиксированными путями и параметрами пути важен? Приведи пример.

Что такое query параметры? Как их использовать и валидировать?

В чем разница между обязательными и необязательными query параметрами?

Что такое alias для query параметра и когда его применяют?

Какие ограничения на query параметры (min_length, max_length, regex) можно задать?

Как принимать несколько значений одного query параметра? Чем это удобно?

Какие типы данных можно передавать в body запросов? Приведи примеры.

Что такое Pydantic и почему он важен для FastAPI?

Как создавать модели Pydantic и что такое наследование моделей?

Как указывать примеры (examples) для моделей Pydantic?

Что такое параметр extra в Pydantic и как он влияет на валидацию?

Что такое cookie и как она используется для сессий в FastAPI?

Чем cookie отличаются от заголовков HTTP?

Какая разница между методами accept файла как bytes и UploadFile в FastAPI?

Для чего используется HTTPException в FastAPI?

Как обрабатывать ошибки валидации RequestValidationError?

Что такое response_model и его роль в документации и валидации ответов?

Как задать summary, description, tags и deprecated для маршрутов?

Что делает параметр exclude_unset в Pydantic модели?

Как работает метод copy(update=...) у Pydantic моделей?

Чем отличаются методы PUT и PATCH?

Что такое path параметр со starlette path и как его использовать?

Что такое Annotated и как используется в FastAPI?

Как задавать числовые ограничения (ge, le и др.) для параметров?

Чем Body отличается от Form и почему их нельзя использовать вместе?

Как сделать редирект в FastAPI и для чего он нужен?

Как группировать маршруты по тегам в FastAPI?

Как передавать вложенные Pydantic модели в теле запроса?

Как обеспечить безопасность cookie (secure, httponly)?

Что такое dependency injection в FastAPI?

Как тестировать FastAPI приложения?

Какие есть способы кастомизации документации Swagger/ReDoc?

Что такое дискриминаторы в Pydantic и зачем они нужны?

Как контролировать включение/исключение полей в response_model?

2. Практические вопросы (код)
Реализуй GET эндпоинт с path параметром с проверкой диапазона числа.

Создай GET эндпоинт с query параметрами и ограничениями (min_length, enum).

Напиши POST эндпоинт с Pydantic моделью, исключающей приватные поля из ответа.

Реализуй проверку и чтение cookie в FastAPI с выдачей 401 при отсутствии.

Используй starlette path параметр для приема полного пути к файлу, вернуть только имя.

Реализуй PUT эндпоинт с полной перезаписью пользователя.

Реализуй PATCH эндпоинт с отдельной моделью и частичным обновлением.

Напиши функцию сериализации модели через jsonable_encoder и обратного создания.

Сделай HTML форму для ввода данных, создай GET и POST эндпоинты для работы с ней.

Реализуй загрузку файла через UploadFile с проверкой типа и размера.

Напиши эндпоинт с query параметром с alias.

Создай кастомный обработчик HTTPException с логированием и ответом.

Реализуй эндпоинт с несколькими query параметрами-списками.

Напиши приложение с обработкой query, path, body и form параметров.

Реализуй редирект с кодом 302.

Используй response_model_exclude_none и response_model_include для кастомизации ответов.

Создай вложенную Pydantic модель, обслуживаемую эндпоинтом.

Реализуй пагинацию через query параметры с валидацией.

3. Полноценные приложения (комбинация навыков)
Сервис пользователей с сессиями и CRUD

CRUD операции над моделью User.

Авторизация/аутентификация через cookie.

Ограничение доступа к операциям по сессии.

Документация с тегами, примерами, описаниями.

Загрузка и проверка файлов с формами

HTML форма с загрузкой файла и вводом данных.

Эндпоинты для приема multipart/form-data.

Проверка типа и размера файла.

Обработка ошибок и возвращение метаданных.

API по поиску и фильтрации пользователей

Поиск по path параметру (город) и фильтрация по возрасту (query параметры).

Пагинация, сортировка, возврат частичных данных.

Разные response_model для успешных ответов и ошибок.

Документация и безопасность

Использование deprecated, summary, description.

Cookie с secure и httponly.

Обработка ошибок, логирование и тестирование.
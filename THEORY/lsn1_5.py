from UTILS.APP_RUN import app_run
from fastapi import FastAPI, Path, Query
from typing import Annotated

# http://127.0.0.1:8000/docs
# http://127.0.0.1:8000/redoc
app = FastAPI()
app.name = "app"

"""
Для понимания этого урока рекомендуется рассмотреть уроки query (с 2_1 по 2_6)
Свойства path параметров можно задавать через объект Path (точно также как и у Query, см. уроки серии lsn2_x).
поддерживаются такие параметры как title, description, и другие.
===============================================================
Также как и с query параметрами метаатрибуты задаются через Annotated (в версиях fastapi начиная с 0.0.95)
Annotated в версиях python ниже чем 3.9 импортируется из модуля typing_extensions 
"""

"""
ex1 -> 
валидация числовых параметров:
ge-> больше либо равно ">="
gt-> больше ">"
--------------------------
le-> меньше либо равно "<="
lt-> меньше "<"
Пример:
gt = 0, lt = 100 -> обозначает что параметр может принимать значение от 1 до 99
ge = 0, lt = 100 -> параметр может принимать значения от 0 до 99
gt = 0, le = 100 -> параметр может принимать значения от 1 до 100 
"""


# http://127.0.0.1:8000/ex1/0/1/
@app.get("/ex1/{par1}/{par2}/")
def ex1(
        par1: Annotated[int, Path(description="параметр может быть от 0 до 100", ge=0, le=100)],
        par2: Annotated[int, Path(description="параметр может быть от 1 до 99", gt=0, lt=100)],
):
    return {"par1": par1, "par2": par2}


"""
ex2
Параметры можно объявлять в произвольно порядке используя оператор *, игнорировать порядок позиционных и именованных 
аргументов, но так делать не рекомендуется и лучше всего придерживаться порядка:
path -> query -> body
------------------------------------------------------------------------
Но как возможность есть оператор * (из ванильного python)
"""


# http://127.0.0.1:8000/ex2/100/
# http://127.0.0.1:8000/ex2/100/?q_par=50
@app.get("/ex2/{par1}/")
def ex2(
        *,  # позволяет нарушить порядок позиционных и именованных аргументов
        q_par: Annotated[int, Query(ge=0, le=100)] = 1,
        par1: Annotated[int, Path(ge=0, le=100)],
):
    return {"q_par": q_par, "par1": par1}


if __name__ == '__main__':
    app_run(file=__file__, app_name=app.name, reload=True)

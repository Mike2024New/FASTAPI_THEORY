https://fastapi.tiangolo.com/ru/tutorial/

lsn0 - первое знакомство с Fastapi, запуск приложения через терминал, например: uvicorn THEORY.lsn0:app --reload,
это позволит переписывать сам файл (например менять эндпоинты) и сервер будет автоматически перезагружаться, что
удобно так как не нужно перезагружать приложение каждый раз в ручную. Чтобы остановить приложение в терминале использ
ctrl+c.

PATH ПАРАМЕТРЫ: ПАРАМЕТРЫ ПУТИ (методы get)  -> http://127.0.0.1:8000/page{page_id}/

    lsn1_1 - path параметры, которые являются частью пути (url), используются как правило для ссылки на какой
    либо ресурс, например номер заявки, страницы и так далее. Вот простой пример такого url,
    http://127.0.0.1:8000/page{page_id}/ где page_id в {} как раз и обозначает параметр пути. Локализация ошибок в
    случае неправильного ввода path параметра.

    lsn1_2 - Важность порядка размещения функций с фиксированным путем и параметрами пути,
    если их url совпадают. Ситуация когда есть фиксированный путь url, например /page/my_page/ и url с path параметрами
    /page/{num_page}/, важно разместить url с фиксированным путём выше, чем url с path параметрами иначе это приведет к
    непредсказуемому результату, когда url фиксированного пути будет перехвачен обработчиком url динамического пути.
    ВАЖНО! url фиксированного пути всегда идут на самом верхнем уровне.

    lsn1_3 - предопределение path параметров с помощью Enumerate перечислений и генерация интерактивной документации.

    lsn1_4 - пути в path параметрах, ситуация когда нужно указать путь (например: /cats/funny_cats/images/) в url, для
    этого используется опция starlette path, например url в эндпоинте теперь будет отображаться так: /{file_path:path}/
    что будет обозначать для fastapi ожидается ввод пути. Также в примере разобрана ситуация как комбинировать несколько
    path параметров и как их связать с параметром который ожидает путь. Пример первых тестов на requests из модуля
    UTILS.

    lsn1_5 - установка дополнительных параметров валидации в Path() объекте. Использование ge (больше либо равно),
    gt(больше), le (меньше либо равно), lt(меньше). Числовые диапазоны.

QUERY ПАРАМЕТРЫ: ДОПОЛНИТЕЛЬНЫЕ ПАРАМЕТРЫ В URL (методы get) -> http://127.0.0.1:8000/?show_pages=10&limit=2

    lsn2_1 - query параметры, это параметры в виде пар ключ значение, которые идут после url. Могут быть необязательными
    для этог нужно предустановить значение по умолчанию. А также обязательными. В примере рассматриваются разные типы
    query параметров. Синтаксис написания: http://127.0.0.1:8000/?par1=val1&par2=val2 где ?par1=val1&par2=val2 и есть
    как раз query параметры.
    Важно! Query параметры не подходят для передачи чувствительной информации (номеров дебетовых карт cvs кодов и
    так далее), так как видны в url и также могут быть сохранены в журнале браузера и могут попасть к злоумышленникам.

    lsn2_2 - комбинация path и query параметров в url. path параметр всегда содержится в url, а query параметр
    объявляется в функции контроллере, но не в url. Также path параметр всегда обязателен а query нет (если присвоено
    значениие по умолчанию).

    lsn2_3 - объект Query, установка дополнительных параметров и свойств query параметров. Установка Query свойств через
    Annotated (используется в typing для присвоения параметрам метаинформации). Старый способ записи без Annotated.
    До версий 3.9 Annotated импортируется из typing_extensions.

    lsn2_4 - Query установка ограничений входного значения параметра min_length, max_length, pattern (регулярные
    выражения), числовые параметры. Обязательный Query параметр без присвоения значения по умолчанию и обработка null в
    ручную в функции эндпоинте.

    lsn2_5 - предача списков в query или вызов query несколько раз. Присвоение списка по умолчанию через
    default_factory, чтобы гарантировать независимую копию списка.

    lsn2_6 - дополнительная метаинформация, title - название параметра отображаемое в документации, descriptions -
    описание параметра отобр в документации, depricated - предупреждение об устаревании параметра (то есть он ещё
    работает, но в доках отображается, что это устаревшая технология), alias псевдоним параметра, например нужно, чтобы
    для url он назывался query-par, но для python это имя не валидно, с помощью alias, можно связать
    query-par и query_par. Исключение параметра из схемы - include_in_schema (то есть параметр не будет отображаться в
    документации).

    lsn2_7 - группировка query параметров, pydantic модели можно использовать для группировки query параметров в группы.
    Связывание query и pydantic модели происходит через Annotated, с указанием в метаатрибутах объекта Query(). Важный
    нюанс про aliast и совместимость pydantic и fastapi, лучше в query-pydantic моделях воздержаться от их использования
    так как это может приводить к некоректному чтению результатов из url (пример со списками).
    Запрет на добавление лишних ключей в параметрах запроса extra = "forbid" в конфигурации модели.

BODY ПАРАМЕТРЫ: ПЕРЕДАЮТСЯ В ТЕЛЕ ЗАПРОСА (методы POST,PUT, DELETE)

    lsn3_1 - body параметры - это данные которые клиент отправляет в теле HTTP запроса (через POST, PUT, DELETE) в
    формате json. Они не фиксируются в истории и логах, их не видно в url, они отлично подходят для передачи
    чувствительной информации. Также в уроке рассмотренна комбинация path, query и body параметров, как Pydantic
    понимает кто есть кто.

    lsn3_2 - множество body параметров, особенность в том, что каждый параметр передается по своему ключу. Явное
    указание, что параметр является body параметром (если этого не сделать то параметр будет воспринят как query).

    lsn3_3 - embed=True, эта настройка в параметре Body, даёт возможность задавать правило, что единичные тела запроса
    (когда всего одно тело запроса), будут передаваться строго по ключу (название параметра).

    lsn3_4 - параметры полей модели запроса body, min_length, max_lengt,ge,gt, le, lt и так далее. Особенность работы с
    псевдонимами alias, опция populate_by_name в конфигурации модели, для возможности передавать названия и по
    псевдонимам и по названиям атрибутов.

    lsn3_5 - body вложенные модели. Несколько уровней вложенности pydantic моделей. Опциональные вложенные модели.
    Работа с вложенными моделями через точечную нотацию.

    lsn3_6 - дискриминатор и обощающий тип, когда несколько моделей одинакового уровня вложенности, нужно уместить в
    одну коллекцию. Обобщающий тип позволяет за счёт дискриминатора показать pydantic на прямую, какую модель сейчас
    стоит проверять и это позволяет делать точную локализацию всех ошибок. Когда без дискриминатора, pydantic выпадет
    на первой же ошибке, показывая не точную локализацию.
    Встроенные методы у моделий.

    lsn3_7 - объявление json схемы с примерами входных данных для pydantic моделей (это справедливо и для query
    параметров). Чтобы добавить свои примеры, нужно использовать конфигурацию json_schema_extra в model_config. А также
    можно напрямую прописывать примеры в атрибутах в поле field, прописывая примеры в опции examples в виде списка.
    Примеры для пользовательского ввода отображаются в документации swagger ui, redoc.

    lsn3_8 - различные типы данных в pydantic, pydantic поддерживает не только базовые типы данных, такие как
    int, float,str, bool но и более сложные типы данных, например datetime и другие типы данных, при чем под капотом он
    выполнит преобразование в этот тип.

COOKIE параметры:
    lsn4_1 - прием cookie файлов на стороне сервера. Объяснение концепции куки, смысл в том, что это отдельный канал
    данных который позволяет управлять взаимодействием клиента и сервера, собирать статистику о действиях клиента (для
    рекламы используется), избегать необходимости авторизации после каждой перезагрузки страницы и так далее.
    Рекомендация о том, что куки нужно передавать через https, установив TLS рукопожатие (подробнее об этой теме можно
    посмотреть в разделе BONUS/bs2.py).
    См. также подробные примеры работы с Cookie в BONUS/bs3.py и BONUS/bs3_requests.py, там показан простой пример
    авторизации и использования куки и сессии в куках.

HEADER параметры:

    lsn5_1 -

Редирект -> перенаправление с эндопоинта на другой адрес

    lsn10_1 - редирект для GET запроса -> объект RedirectResponce, с передачей url перенаправления и статуса
    перенаправления: 301 - постоянный редирект, 302 - временный редирект (по умолчанию).


======================================================
Темы к дополнительному изучению:
    1.Явное указание, что ответ должен идти в dict, response_model=dict, return JSONResponse(content=...)
bs1 - как реализован паттерн декораторов fastapi под капотом? А как fastapi понимает и вытаскивает из url path
параметры?

bs2 - как данные передаются по протоколу https и при этом не могут быть перехвачены на стороне? Сильно упрощенная модель
TLS рукопожатия сервера и клиента, в основе которой лежит механизм асимметричного шифрования. Внимание пример очень сильно
упрощен, чтобы понять базовую концепцию, в реальном взаимодействии все намного сложнее, используются более сложные ключи
шифрования. TLS рукопожатие, это механизм создания безопасного канала общения между сервером и клиентом, во избежание
перехвата данных злоумышленниками.

bs3 - простой прототип приложения с использованием Cookie и авторизацией через cookie, про то как последующие запросы
связаны с куками.

bs3_requerst - приложение с ручным тестированием на requests для bs3.

bs4 - немного о bytes, и о том в каком виде файлы передаются по сети. Двоичное представление данных.

bs5 - объяснение как работают JWT токены в python, состоящие из 3 компонентов Header (метаинформация), payload (полезная
нагрузка), signature (цифровая подпись - hash вычисленный на базе header+payload+секретный ключ). Можно использовать
как полноценную утилиту для интеграции на сервер (в последствии стоит доработать реализацию refresh токенов, механизм
отзыва токенов (например если пользователь вышел из системы) в виде стоп листа токенов (требуется хранилище, например
sql).

bs6 - механизм хэширования паролей. Хэш пароля создаётся на основании самого пароля и секретного ключа (секретный ключ
хранится только на сервере, что усложняет взлом пароля с помощью радужных таблиц).  Хэшированный пароль не возможно
расшифровать обратно (алгоритм односторонний). В БД на серверах хранятся именно хеши паролей, и когда пользователь
вводит пароль при авторизации на сервере введенный пользователем пароль хэшируется и сравнивается с хэшем существующего
пароля в БД, и если хэши сойдутся, то все ок пользователь авторизуется. Если нет, то пользователю будет отказано в входе
так как пароль не верный.



